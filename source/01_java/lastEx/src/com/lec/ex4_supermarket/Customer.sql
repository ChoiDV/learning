DROP TABLE CUSTOMER;
DROP TABLE CUS_LEVEL;
DROP SEQUENCE CUS_SEQ;

CREATE TABLE CUS_LEVEL(
    LEVELNO NUMBER(1,0) PRIMARY KEY,
    LEVELNAME VARCHAR2(20),
    LOW NUMBER(9,0),
    HIGH NUMBER(9,0) );

CREATE TABLE CUSTOMER(
    CID NUMBER(6,0) PRIMARY KEY,
    CTEL VARCHAR2(20) NOT NULL,
    CNAME VARCHAR2(30) NOT NULL,
    CPOINT NUMBER(9,0) DEFAULT 1000,
    CAMOUNT NUMBER(9,0) DEFAULT 0,
    LEVELNO NUMBER(1,0) DEFAULT 1,
    FOREIGN KEY(LEVELNO) REFERENCES CUS_LEVEL(LEVELNO) );


CREATE SEQUENCE CUS_SEQ
    MAXVALUE 999999
    NOCACHE
    NOCYCLE;

-- INSERT INTO CUS_LEVEL VALUES (0,'블랙',NULL,NULL);
INSERT INTO CUS_LEVEL VALUES(1,'일반',0,999999);
INSERT INTO CUS_LEVEL VALUES(2,'실버',1000000,1999999);
INSERT INTO CUS_LEVEL VALUES(3,'골드',2000000,2999999);
INSERT INTO CUS_LEVEL VALUES(4,'VIP',3000000,3999999);
INSERT INTO CUS_LEVEL VALUES(5,'VVIP',4000000,999999999);

SELECT * FROM CUS_LEVEL;
SELECT * FROM CUSTOMER;

INSERT INTO CUSTOMER (CID, CTEL, CNAME) VALUES ( CUS_SEQ.NEXTVAL, '010-8888-9999','유길동');

INSERT INTO CUSTOMER VALUES (CUS_SEQ.NEXTVAL,'010-1234-5678','홍길동',1000,0,1);
INSERT INTO CUSTOMER VALUES (CUS_SEQ.NEXTVAL,'010-4434-9878','최진영',1000,0,1);
INSERT INTO CUSTOMER VALUES (CUS_SEQ.NEXTVAL,'010-1478-0125','박지원',1000,0,1);
INSERT INTO CUSTOMER VALUES (CUS_SEQ.NEXTVAL,'010-7874-3698','오동준',1000,0,1);
INSERT INTO CUSTOMER VALUES (CUS_SEQ.NEXTVAL,'010-4687-8546','이다솜',1000,0,1);
INSERT INTO CUSTOMER VALUES (CUS_SEQ.NEXTVAL,'010-4332-1632','김유진',1000,0,1);
INSERT INTO CUSTOMER VALUES (CUS_SEQ.NEXTVAL,'010-4332-1632','김김유진',1000,0,1);
INSERT INTO CUSTOMER VALUES (CUS_SEQ.NEXTVAL,'010-333-9878','박박지원',1000,120000,2);
INSERT INTO CUSTOMER VALUES (CUS_SEQ.NEXTVAL,'010-4141-8585','홍길동',2000000,0,3);

SELECT * FROM CUSTOMER;

-- 프로그램에 필요한 QUERY
-- 0. 레벨이름들 검색 : public Vectorr<String> getLevelNames()
SELECT LEVELNAME FROM CUS_LEVEL;

-- 1.아이디검색  : public CustomerDto cIdGetCustomer(int cid)
-- CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, forLevelUp
SELECT CID, CTEL, CNAME,CPOINT,CAMOUNT, LEVELNAME ,
                                (SELECT HIGH+1-CAMOUNT FROM CUSTOMER WHERE CID=C.CID AND LEVELNO != 5 ) forLevelUp   -- HIGH+1 은 레벨업 한 금액 - 현재누적금액을 하면 레벨업하기위한 금액이 나옴
    FROM CUSTOMER C, CUS_LEVEL L
        WHERE C.LEVELNO = L.LEVELNO
             AND CID='1';

-- 2.폰4자리(FULL) 검색  : ArrayList<CustomerDto> cTelGetCustomer(String cTEL)
    -- CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, forLevelUp
SELECT CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME,  (SELECT HIGH+1-CAMOUNT FROM CUSTOMER WHERE CID=C.CID AND LEVELNO != 5 ) forLevelUp
    FROM CUSTOMER C, CUS_LEVEL L
        WHERE C.LEVELNO = L.LEVELNO
            AND CTEL LIKE '%' || '9878' ;

-- 3.고객이름검색 : ArrayList<CustomerDto> cNameGetCustomer(String cName)
    -- CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, forLevelNo
SELECT CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME,  (SELECT HIGH+1-CAMOUNT FROM CUSTOMER WHERE CID=C.CID AND LEVELNO != 5 ) forLevelUp
    FROM CUSTOMER C, CUS_LEVEL L
        WHERE C.LEVELNO = L.LEVELNO
            AND CNAME = '홍길동'
                ORDER BY CAMOUNT DESC;
            
-- 4.포인트로만 구매 : int buyWithPoint(int cid, int cAmount)
UPDATE CUSTOMER SET CPOINT = CPOINT- 100 WHERE CID = 2;
SELECT * FROM CUSTOMER;



-- 5.물품구매 : int buy(int cId, int cAmount)
    -- 물품구매 update에는 cPoint, cAmount, levelNo가  수정
-- 5-1 : CPOINT, CAMOUNT 수정 
UPDATE CUSTOMER SET CPOINT = CPOINT+ (1000000 *0.05), CAMOUNT = CAMOUNT + 1000000
    WHERE CID ='1';

-- 5-2 : LEVELNO 변경하기 전 현 레벨번호와 수정될 레벨번호
SELECT CID, CNAME, CAMOUNT, C.LEVELNO 현레벨, L.LEVELNO 수정될레벨
    FROM CUSTOMER C, CUS_LEVEL L
        WHERE CAMOUNT BETWEEN LOW AND HIGH AND CID=1;

-- 5-3 : LEVELNO 체크 후 수정
UPDATE CUSTOMER SET LEVELNO = (SELECT L.LEVELNO
    FROM CUSTOMER C, CUS_LEVEL L
        WHERE CAMOUNT BETWEEN LOW AND HIGH AND CID=1)
            WHERE CID=1;
-- 5-1과 5-3 을 합쳐 CPOINT, CAMOUNT, LEVELNO를 한꺼번에 수정
UPDATE CUSTOMER SET CPOINT = CPOINT + (1000000*0.05),
                                              CAMOUNT = CAMOUNT + 1000000,
                                              LEVELNO = (SELECT L.LEVELNO
                                                                         FROM CUSTOMER C, CUS_LEVEL L
                                                                              WHERE CAMOUNT+1000000 BETWEEN LOW AND HIGH AND CID=1)
                    WHERE CID=1;
                    
SELECT * FROM CUSTOMER;                
-- 6.등급별 출력 : ArrayList<CustomerDto> levelNameGetCustomer(String levelNamee)
    -- CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, forLevelUp
SELECT CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME,  (SELECT HIGH+1-CAMOUNT FROM CUSTOMER WHERE CID=C.CID AND LEVELNO != 5 ) forLevelUp
    FROM CUSTOMER C, CUS_LEVEL L
        WHERE C.LEVELNO = L.LEVELNO
            AND LEVELNAME = '일반'
                ORDER BY CAMOUNT DESC;
    
-- 7.전체출력 : ArrayList<CustomerDto> getCustomers() 
    -- CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME, forLevelUp
SELECT CID, CTEL, CNAME, CPOINT, CAMOUNT, LEVELNAME,  (SELECT HIGH+1-CAMOUNT FROM CUSTOMER WHERE CID=C.CID AND LEVELNO != 5 ) forLevelUp
    FROM CUSTOMER C, CUS_LEVEL L
        WHERE C.LEVELNO = L.LEVELNO
                ORDER BY CAMOUNT DESC;
    
-- 8.회원가입 : int insertCustomer (String cTel,String  cName)
    --int insertCustomer(CustomerDto dto)
INSERT INTO CUSTOMER ( CID, CTEL, CNAME)
    VALUES (CUS_SEQ.NEXTVAL, '010-6666-66666', '유길동');
    
-- 9. 번호수정 : int updateCustomer(int cId, String cTel)
UPDATE CUSTOMER SET CTEL = '010-5555-5555' WHERE CID = 1;

-- 10.회원탈퇴 : int deleteCustomer (String cTel) 
DELETE FROM CUSTOMER WHERE CTEL=?;  -- ? 는 입력받을값

-- 업데이트로 회원탈퇴 가능 : 새로운 필드 만들어서 제적자처럼




COMMIT; 








