<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
	
	<bean id="student" class="com.lec.ch05.ex1.Student">
		<property name="name" value="최진영"/>
		<property name="age" value="24"/>
		<property name="gradeNum" value="2"/>
		<property name="classNum" value="4"/>
	</bean>
	<bean id="worker" class="com.lec.ch05.ex1.Worker">
		<property name="name" value="오동좌"/>
		<property name="age" value="28"/>
		<property name="job" value="개발자"/>
	</bean>
	
	<bean id="proxyClass" class="com.lec.ch05.ex1.ProxyClass"/>  <!--  이렇게 만들면 메모리상에 ProxyClass 에 있는 함수들이 올라감. -->
	
	<!--  이제 연결 proxyClass 와 student, worker와 연결하기  -->
	<aop:config>
		<aop:aspect id="aroundAspect" ref="proxyClass">  <!--  proxyClass를 aroundAspect 에 전부 넣어준뒤  -->
			<aop:pointcut expression="within(com.lec.ch05.ex1.*)" id="aroundM"/>  <!--  이러면 student와 worker에 있는 모든 메소드들이 들어가고 그것들 aroundM 이라고 부르며, -->
			<aop:around method="aroundAdvice" pointcut-ref="aroundM" />  <!-- aroundM에 있는 메소드를 실행할때 aroundAdvice란 함수를 앞뒤로 수행하게 한다.   -->
			<!--  aop:around 의 around가 앞뒤로 수행해라라는 뜻  -->
		</aop:aspect>
		
		<aop:aspect id="beforeAspect" ref="proxyClass">  <!--  expression="execution" 은 함수이름을 쓰면 됌. -->
			<aop:pointcut expression="execution(void com.lec.ch05.ex1.Worker.*())" id="beforeM" />
			<aop:before method="beforeAdvice" pointcut-ref="beforeM"/>
		</aop:aspect>
		
		<aop:aspect id="afterAspect" ref="proxyClass">   <!--  expression="bean(stud*)는 stud로 시작하는 bean의 함수를 수행하자마자 afterAdvice를 실행하라! -->
			<aop:pointcut expression="bean(stud*)" id="afterM"/>
			<aop:after method="afterAdvice" pointcut-ref="afterM"/>
		</aop:aspect>	
		
		<aop:aspect id="afterReturnAspect" ref="proxyClass">
			<aop:pointcut expression="within(com.lec.ch05.ex1.Worker)" id="afterReturnM"/>
			<aop:after-returning method="afterReturningAdvice" pointcut-ref="afterReturnM"/>
		</aop:aspect>
		
		<aop:aspect id="afterThowingAspect" ref="proxyClass">   <!--  이건 예외발생시 실행할 공통기능 -->
			<aop:pointcut expression="execution(void com.lec.ch05.ex1.Student.*())" id="afterThrowM"/>
			<aop:after-throwing method="afterThrowingAdvice" pointcut-ref="afterThrowM"/>
		</aop:aspect>
			
	</aop:config>
	
	
</beans>
