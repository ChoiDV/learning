<인터페이스> 
: 작업명세서(작업지시서) 실제 구현된 것이 전혀 없는 기본 *설계도* 이다.
1. 객체를 생성할 수 없고, 클래스 작성에 도움을 줄 목적으로 사용된다. 

2. 미리 정해진 규칙에 맞게 구현하도록 표준을 제시하는데 사용된다. 

3. 추상메소드와 상수만을 멤버로 가질수 있다.

4.  다형성을 가능하게 한다.

5. 객체를 부속품화 할 수 있다.

 <인터페이스 문법>
인터페이스는 public class 가 아닌
  public interface interfaceName{} 으로 사용한다.

이 안에는 static final 상수와 abstract 메소드를 가질수 있다. 
구현은 클래스에서 implement를 사용해 구현한다.


<다형성>
여러 가지 형태를 가질수 있는 능력
: 말 그대로 객체가 다양하게 변할 수 있다고 생각하면 된다.


<오버로딩 vs 오버라이딩>
오버로딩 : 컴파일러 입장에서는 기존에 없는 새로운 메소드를 정의하는 것이다.
	 메소드 다중정의(같은 class에서 동일한 메소드가 매개변수를 달리 여러 개 존재)

오버라이딩 : 상속받은 메소드의 내용을 변경하는 것이다.
	메소드 재정의 : 부모클래스와 자식클래스에 동일한 method 존재(틀만 가져와 재정의)

<인터페이스와 다중 상속>
Java는 다중 상속이 불가하다.
하지만 인터페이스를 통해서는 다중 구현이 가능하며, 여러 가지 타입으로 객체를 선언할 수 있다.
즉 java는 다중상속이 아닌 다형성이 존재한다고 생각하면 된다.
