<XP (eXtrem Programming) 기법 >

① XP (eXtrem Programming )
: 수시로 발생하는 고객의 요구사항에 유연하게 대응하기 위해 
	고객의 참여와 개발 과정의 반복을 극대화 하여 개발 생산선을 향상시키는 방법.

- xp는 짧고 반복적인 개발주기, 단순한 설계, 고객의 적극적인 참여를 통해 sw를 빠르게 개발하는 것을 목적으로 한다.
- 릴리즈 기간을 짧게 하면서 고객의 요구사항 반영에 대한 가시성을 높인다.
- 릴리즈 테스트마다 고객을 직접 참여시킴으로써 요구한 기능이 제대로 작동하는지 고객이 직접 확인할 수 있다.
- 비교적 소규모 인원의 프로젝트에 효과적이다.

즉, 짧고 반복적인 개발주기로 고객의 요구사항 반영을 개발주기마다 하면서 고객의 만족을 올리는 기법이라고 생각.

XP의 5가지 핵심 가치 
1. 의사소통(Communication)
2. 단순성 (Simplicity)
3. 용기 ( Courage )
4. 존중 ( Respect )
5. 피드백 ( Feedback )
*의단용존피*


*릴리즈* : 릴리즈는 몇 개의 요구사항이 적용되어 부분적으로 기능이 완료된 제품을 제공하는 것을 말한다.


② XP 개발 프로세스
1. 사용자 스토리 (User Story)
- 고객의 요구사항을 간단한 시나리오로 표현.
- 내용은 기능 단위로 구성, 필요한 경우 간단한 테스트 사항도 기재

2. 릴리즈 계획 수립 (Release Planning )
- 몇 개의 스토리가 적용되어 부분적으로 기능이 완료된 제품을 제공하는 것을 릴리즈 라고 한다.
- 부분 혹은 전체 개발 완료 시점에 대한 일정을 수립한다.

3. 스파이크 (Spike)
- 요구사항의 신뢰성을 높이고, 기술 문제에 대한 위험을 감소시키기 위해 별도로 만드는 간단한 프로그램.
- 처리할 문제 외의 다른 조건은 모두 무시하고 작성.

4. 이터레이션 (Iteration)
- 하나의 릴리즈를 더 세분화 한 단위를 이터레이션(Iteration) 이라고 한다.
- 일반적으로 1~3주 정도의 기간으로 진행.

5. 승인 검사(Acceptance Test, 인수 테스트)
- 하나의 이터레이션 안에서 계획된 릴리즈 단위의 부분 완료 제품이 구현되면 수행하는 테스트.
- 테스트 과정에서 발견한 오류 사항은 다음 이터레이션에 포함.

6. 소규모 릴리즈(Small Release)
- 릴리즈를 소규모로 하게 되면, 고객의 반응을 기능별로 확인할 수 있어, 고객의 요구사항에 
	좀 더 유연하게 대응할 수 있다.
- 계획된 릴리즈 기간 동안 진행된 이터레이션이 모두 완료되면 고객에 의한 최종 테스트를
	수행한 후 릴리즈, 즉 최종 결과물을 고객에게 전달.
- 릴리즈가 최종 완제품이 아닌 경우 다음 릴리즈 일정에 맞게 개발을 계속 진행.

이렇게 xp 개발 과정의 순서는
1. 사용자 스토리
2. 릴리즈 계획 수립
3. 스파이크
4. 이터레이션
5. 승인 검사
6. 소규모 릴리즈
(xp 개발 과정의 순서 기억하고, 각 과정에서 수행하는 작업들 파악하기 !)


** XP의 주요 실천 방법 **
Pair Programming ( 짝 프로그래밍 ) : 다른 사람과 함께 프로그래밍을 수행하면서 개발에 대한 책임을 공동으로 나눠 갖는다.

Collective Ownership ( 공동 코드 소유 ) : 개발 코드에 대한 권한과 책임을 공동으로 소유.

Test-Driven Development ( 테스트 주도 개발) : 개발자가 실제 코드를 작성하기 전에 테스트 케이스를 먼저 작성
					자신이 무엇을 해야할지 정확히 파악.
					- 테스트가 지속적으로 진행될 수 있도록 자동화된 테스팅도구를 사용.

Whole Team ( 전체 팀 ) : 개발에 참여하는 모든 구성원 들은 (고객 포함) 각자 자신의 역할이 있고
				그 역할에 대한 책임을 가져야 한다.

Continuous Integration ( 계속적인 통합 ) : 모듈 단위로 나눠서 하나의 작업이 마무리 될때마다 지속적으로 통합

Design Improvement ( 디자인 개선 ) or Refactoring(리팩토링) : 프로그램 기능의 변경 없이, 단순화, 유연성 강화 등을 통해
							시스템을 재구성.

Small Releases ( 소규모 릴리즈 ) : 릴리즈 기간을 짧게 반복함으로써 고객의 요구 변화에 신속히 대응한다.

즉, Pair Programming은 짝, 개발에 대한 공동 책임
    Collective Ownership은 공동,  공동 권한 공동 책임
    Test-Driven Development는 테스트 주도 개발
     Whole Team은  팀, 각자 역할이 있고 책임을 가진다.
    Continuous Integration은 하나의 작업이 끝날때마다 지속적으로 통합시킨다.
    Design Improvement, Refactoring은 기능의 변경 없이 시스템을 재구성
    Small Releases는 릴리즈 기간을 짧게 반복하면서 고객만족 ↑



